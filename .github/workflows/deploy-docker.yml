name: Docker Deploy to Production

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build -t audiotexthub:latest .
          docker save audiotexthub:latest | gzip > audiotexthub.tar.gz

      - name: Upload Docker Image
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.DEPLOY_PASS }}
          source: "audiotexthub.tar.gz,docker-compose.prod.yml,nginx.conf,.env.docker.example,Dockerfile"
          target: "/tmp/"

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.DEPLOY_PASS }}
          command_timeout: 30m
          script: |
            set -e
            APP_DIR="/var/www/audiotexthub"
            BACKUP_DIR="${APP_DIR}/backups"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)

            echo "Creating directories..."
            sudo mkdir -p "${APP_DIR}/{backups,logs,ssl}"
            sudo chown -R "$USER:$USER" "${APP_DIR}"
            cd "${APP_DIR}"

            if [ -f docker-compose.prod.yml ]; then
              cp docker-compose.prod.yml "${BACKUP_DIR}/docker-compose.prod.yml.${TIMESTAMP}"
              [ -f nginx.conf ] && cp nginx.conf "${BACKUP_DIR}/nginx.conf.${TIMESTAMP}"
            fi

            cp /tmp/docker-compose.prod.yml .
            cp /tmp/nginx.conf .
            cp /tmp/.env.docker.example .env
            cp /tmp/Dockerfile .

            command -v docker >/dev/null || { echo "Docker not installed"; exit 1; }

            if ! docker compose version >/dev/null && ! command -v docker-compose >/dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            docker load < /tmp/audiotexthub.tar.gz
            rm -f /tmp/audiotexthub.tar.gz

            # Ensure .env has only necessary keys
            echo "Ensure .env configured..."
            sed -n 's/^NEXT_PUBLIC_API_URL/=NEXT_PUBLIC_API_URL/p; s/^AUTH_SECRET/=&/p' .env > .env.tmp && mv .env.tmp .env

            echo "Stopping old containers..."
            docker-compose -f docker-compose.prod.yml down || docker compose -f docker-compose.prod.yml down || true

            echo "Starting new containers..."
            if command -v docker-compose >/dev/null; then
              docker-compose -f docker-compose.prod.yml up -d
            else
              docker compose -f docker-compose.prod.yml up -d
            fi

            sleep 10
            echo "Deployment complete."

      - name: Health Check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.DEPLOY_PASS }}
          script: |
            CONTAINER=$(docker ps --format '{{.Names}}' | grep audiotexthub | head -n1)
            docker ps | grep -q "$CONTAINER" || { echo "App container not running"; exit 1; }
            for i in {1..10}; do
              CODE=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:80 || echo 000)
              [ "$CODE" = "200" ] && exit 0
              sleep 5
            done
            echo "Health check failed" && docker logs --tail 100 "$CONTAINER" && exit 1

      - name: Cleanup
        if: always()
        run: rm -f audiotexthub.tar.gz

      - name: Success Notification
        if: success()
        run: echo "üéâ Deployment succeeded: ${{ github.sha }} on ${{ github.ref_name }}"

      - name: Failure Notification
        if: failure()
        run: echo "‚ùå Deployment failed, check logs."
